{"version":3,"file":"static/js/168.ffb4729e.chunk.js","mappings":"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","sources":["components/Loader.jsx","components/ViewPdf.jsx","pages/admin/AdminSingleOrder.jsx"],"sourcesContent":["import React from \"react\";\r\nimport { DNA } from \"react-loader-spinner\";\r\n\r\nfunction Loader() {\r\n  return (\r\n    <div\r\n      style={{\r\n        display: \"flex\",\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\",\r\n      }}\r\n    >\r\n      <DNA\r\n        visible={true}\r\n        height=\"160\"\r\n        width=\"160\"\r\n        ariaLabel=\"dna-loading\"\r\n        wrapperStyle={{}}\r\n        wrapperClass=\"dna-wrapper\"\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Loader;\r\n","import { useState } from \"react\";\r\nimport { Document, Page } from \"react-pdf\";\r\nconst pdfjs = await import(\"pdfjs-dist/build/pdf\");\r\nconst pdfjsWorker = await import(\"pdfjs-dist/build/pdf.worker.entry\");\r\n\r\npdfjs.GlobalWorkerOptions.workerSrc = pdfjsWorker;\r\n\r\nfunction ViewPdf(props) {\r\n  const [numPages, setNumPages] = useState();\r\n  const [pageNumber, setPageNumber] = useState(1);\r\n\r\n  function onDocumentLoadSuccess({ numPages }) {\r\n    setNumPages(numPages);\r\n  }\r\n\r\n  return (\r\n    <div className=\"pdf-div\">\r\n      <p>\r\n        Page {pageNumber} of {numPages}\r\n      </p>\r\n      <Document file={props.pdfFile} onLoadSuccess={onDocumentLoadSuccess}>\r\n        {Array.apply(null, Array(numPages))\r\n          .map((x, i) => i + 1)\r\n          .map((page) => {\r\n            return (\r\n              <Page\r\n                pageNumber={page}\r\n                renderTextLayer={false}\r\n                renderAnnotationLayer={false}\r\n              />\r\n            );\r\n          })}\r\n      </Document>\r\n    </div>\r\n  );\r\n}\r\nexport default ViewPdf;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { useNavigate, useParams } from \"react-router-dom\";\r\nimport Layout from \"../../components/layout/Layout\";\r\nimport Loader from \"../../components/Loader\";\r\nimport axios from \"axios\";\r\nimport { Select } from \"antd\";\r\nimport toast from \"react-hot-toast\";\r\nimport deliveredLogo from \"../../images/deliveryIcon/door-delivery.png\";\r\nimport processingLogo from \"../../images/deliveryIcon/briefcase.png\";\r\nimport notProcessLogo from \"../../images/deliveryIcon/preorder.png\";\r\nimport cancelLogo from \"../../images/deliveryIcon/cancel.png\";\r\nimport shippedLogo from \"../../images/deliveryIcon/delivery-truck.png\";\r\nimport { pdfjs } from \"react-pdf\";\r\nimport ViewPdf from \"../../components/ViewPdf\";\r\n\r\npdfjs.GlobalWorkerOptions.workerSrc = new URL(\r\n  \"pdfjs-dist/build/pdf.worker.min.js\",\r\n  import.meta.url\r\n).toString();\r\n\r\nconst { Option } = Select;\r\n\r\nfunction AdminSingleOrder() {\r\n  const { oid } = useParams();\r\n  const [loading, setLoading] = useState(false);\r\n  const [totalAmount, setTotalAmount] = useState(\"\");\r\n  const [order, setOrder] = useState();\r\n  const [orderId, setOrderId] = useState(\"\");\r\n  const [file, setFile] = useState();\r\n  const [pdfFile, setPdfFile] = useState(\"\");\r\n  const [pdfName, setPdfName] = useState();\r\n  const [pdfData, setPdfData] = useState(\"\");\r\n  const [statusColor, setStatusColor] = useState();\r\n  const [status, setStatus] = useState([\r\n    \"Not Process\",\r\n    \"Processing\",\r\n    \"Shipped\",\r\n    \"Delivered\",\r\n    \"Cancel\",\r\n  ]);\r\n\r\n  async function getSingleOrder() {\r\n    try {\r\n      setLoading(true);\r\n      if (oid) {\r\n        const { data } = await axios.get(`/api/v1/auth/admin-order/${oid}`);\r\n        setOrder(data.order);\r\n        setOrderId(data.order._id);\r\n      }\r\n      setLoading(false);\r\n    } catch (err) {\r\n      setLoading(false);\r\n      console.log(err);\r\n    }\r\n  }\r\n\r\n  async function handleChangeStatus(oid, statusValue) {\r\n    try {\r\n      setLoading(true);\r\n      if (oid && statusValue) {\r\n        const { data } = await axios.put(\r\n          `/api/v1/auth/order-status-update/${oid}`,\r\n          {\r\n            status: statusValue,\r\n          }\r\n        );\r\n        if (data.success) {\r\n          toast.success(data.message);\r\n          getSingleOrder();\r\n        }\r\n      }\r\n\r\n      setLoading(false);\r\n    } catch (err) {\r\n      setLoading(false);\r\n      console.log(err);\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    getSingleOrder();\r\n  }, []);\r\n\r\n  function showPdf(pdf) {\r\n    if (pdf) {\r\n      // window.open(`http://localhost:8080/files/${pdf}`, \"_blank\", \"noreferror\");\r\n      setPdfFile(`http://localhost:8080/files/${pdf}`);\r\n    }\r\n  }\r\n\r\n  const getPdf = async () => {\r\n    try {\r\n      const oid = orderId;\r\n      if (oid) {\r\n        const { data } = await axios.get(`/get-pdf-file/${oid}`);\r\n        if (data.success) {\r\n          setPdfData(data?.pdfData);\r\n        } else {\r\n          setPdfData(\"\");\r\n        }\r\n      }\r\n    } catch (err) {\r\n      console.log(err);\r\n      toast.error(\"No invoice found please upload\");\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    getPdf();\r\n  }, [orderId]);\r\n\r\n  useEffect(() => {\r\n    if (order) {\r\n      const cartTotalAmount = order.products.reduce(\r\n        (amount, item) => item.price * item.cartQuantity + amount,\r\n        0\r\n      );\r\n      setTotalAmount(cartTotalAmount);\r\n      if (order.status === \"Not Process\") {\r\n        setStatusColor(\"text-warning\");\r\n      } else if (order.status === \"Processing\") {\r\n        setStatusColor(\"text-info\");\r\n      }\r\n      if (order.status === \"Shipped\") {\r\n        setStatusColor(\"text-primary\");\r\n      }\r\n      if (order.status === \"Delivered\") {\r\n        setStatusColor(\"text-success\");\r\n      }\r\n      if (order.status === \"Cancel\") {\r\n        setStatusColor(\"text-danger\");\r\n      }\r\n    }\r\n  }, [order]);\r\n\r\n  async function handleUpload() {\r\n    try {\r\n      setLoading(true);\r\n      if (orderId && file && pdfName) {\r\n        const formData = new FormData();\r\n        formData.append(\"pdfName\", pdfName);\r\n        formData.append(\"file\", file);\r\n        formData.append(\"orderId\", orderId);\r\n        const res = await axios.post(\"/upload-pdf\", formData, {\r\n          headers: { \"Content-Type\": \"multipart/form-data\" },\r\n        });\r\n        if (res.data.success) {\r\n          toast.success(\"pdf uploaded successfully\");\r\n        } else {\r\n          toast.err(res.message);\r\n        }\r\n      } else {\r\n        toast.error(\"All fields are required to upload\");\r\n      }\r\n      setLoading(false);\r\n    } catch (err) {\r\n      setLoading(false);\r\n      console.log(err);\r\n    }\r\n  }\r\n  return (\r\n    <Layout clName={\"bg-info-subtle\"} title={\"Your order\"}>\r\n      <div className=\"container\">\r\n        <div className=\"row\">\r\n          <div className=\"col-md-12 ml-4 mr-4 p-3\">\r\n            {loading ? (\r\n              <div>\r\n                <Loader />\r\n              </div>\r\n            ) : (\r\n              <>\r\n                {order && (\r\n                  <>\r\n                    <div\r\n                      style={{ borderRadius: \"10px\" }}\r\n                      className=\"bg-danger-subtle order-user-detail p-3 mt-3 mb-3\"\r\n                    >\r\n                      <h4>\r\n                        Order Id:{\" \"}\r\n                        <span className=\"text-info\">{order?._id}</span>\r\n                      </h4>\r\n                      <h4>\r\n                        Name:{\" \"}\r\n                        <span className=\"text-primary\">\r\n                          {order?.buyer.name}\r\n                        </span>\r\n                      </h4>\r\n                      <h4>\r\n                        Address:{\" \"}\r\n                        <span className=\"text-primary\">\r\n                          {order?.buyer.address}\r\n                        </span>\r\n                      </h4>\r\n                      <h4>\r\n                        Phone No:{\" \"}\r\n                        <span className=\"text-danger\">\r\n                          +91 {order?.buyer.phone}\r\n                        </span>\r\n                      </h4>\r\n                      <h4>\r\n                        Total Price:{\" \"}\r\n                        <span className=\"text-success\">$ {totalAmount}</span>\r\n                      </h4>\r\n                      <div>\r\n                        <h4>\r\n                          Order Status:{\" \"}\r\n                          <span className={statusColor}>{order?.status}</span>\r\n                        </h4>\r\n                        <Select\r\n                          onChange={(value) =>\r\n                            handleChangeStatus(order._id, value)\r\n                          }\r\n                          defaultValue={order?.status}\r\n                        >\r\n                          {status.map((s, i) => (\r\n                            <Option key={i} value={s}>\r\n                              {s}\r\n                            </Option>\r\n                          ))}\r\n                        </Select>\r\n                      </div>\r\n                      <div className=\"d-flex flex-row align-items-center\">\r\n                        <h4> Delivery Path:</h4>{\" \"}\r\n                        {order.status === \"Not Process\" ? (\r\n                          <div\r\n                            style={{\r\n                              display: \"flex\",\r\n                              flexDirection: \"row\",\r\n                              gap: \"0\",\r\n                              whiteSpace: \"nowrap\",\r\n                            }}\r\n                          >\r\n                            <span className=\"fw-3 fs-1 mb-2 text-warning\">\r\n                              ------\r\n                            </span>\r\n                            <img\r\n                              className=\"deliveryIcon\"\r\n                              src={notProcessLogo}\r\n                              alt=\"devicon\"\r\n                            />\r\n                          </div>\r\n                        ) : order.status === \"Processing\" ? (\r\n                          <div\r\n                            style={{\r\n                              display: \"flex\",\r\n                              flexDirection: \"row\",\r\n                              gap: \"0\",\r\n                              whiteSpace: \"nowrap\",\r\n                            }}\r\n                          >\r\n                            <span className=\"fw-3 fs-1 mb-2 text-info\">\r\n                              ------\r\n                            </span>\r\n                            <span className=\"fw-3 fs-1 mb-2 text-info\">\r\n                              ------\r\n                            </span>\r\n                            <img\r\n                              className=\"deliveryIcon\"\r\n                              src={processingLogo}\r\n                              alt=\"devicon\"\r\n                            />\r\n                          </div>\r\n                        ) : order.status === \"Shipped\" ? (\r\n                          <div\r\n                            style={{\r\n                              display: \"flex\",\r\n                              flexDirection: \"row\",\r\n                              gap: \"0\",\r\n                              whiteSpace: \"nowrap\",\r\n                            }}\r\n                          >\r\n                            <span className=\"fw-3 fs-1 mb-2 text-primary\">\r\n                              ------\r\n                            </span>\r\n                            <span className=\"fw-3 fs-1 mb-2 text-primary\">\r\n                              ------\r\n                            </span>\r\n                            <span className=\"fw-3 fs-1 mb-2 text-primary\">\r\n                              ------\r\n                            </span>\r\n                            <img\r\n                              className=\"deliveryIcon\"\r\n                              src={shippedLogo}\r\n                              alt=\"devicon\"\r\n                            />\r\n                          </div>\r\n                        ) : order.status === \"Delivered\" ? (\r\n                          <div\r\n                            style={{\r\n                              display: \"flex\",\r\n                              flexDirection: \"row\",\r\n                              gap: \"0\",\r\n                              whiteSpace: \"nowrap\",\r\n                            }}\r\n                          >\r\n                            <span className=\"fw-3 fs-1 mb-2 text-success\">\r\n                              ------\r\n                            </span>\r\n                            <span className=\"fw-3 fs-1 mb-2 text-success\">\r\n                              ------\r\n                            </span>\r\n                            <span className=\"fw-3 fs-1 mb-2 text-success\">\r\n                              ------\r\n                            </span>\r\n                            <span className=\"fw-3 fs-1 mb-2 text-success\">\r\n                              ------\r\n                            </span>\r\n                            <img\r\n                              className=\"deliveryIcon\"\r\n                              src={deliveredLogo}\r\n                              alt=\"devicon\"\r\n                            />\r\n                          </div>\r\n                        ) : (\r\n                          <div\r\n                            style={{\r\n                              display: \"flex\",\r\n                              flexDirection: \"row\",\r\n                              gap: \"0\",\r\n                              whiteSpace: \"nowrap\",\r\n                            }}\r\n                          >\r\n                            <span className=\"fw-3 fs-1 mb-2 text-danger\">\r\n                              --\r\n                            </span>\r\n                            <img\r\n                              className=\"deliveryIcon\"\r\n                              src={cancelLogo}\r\n                              alt=\"devicon\"\r\n                            />\r\n                          </div>\r\n                        )}\r\n                      </div>\r\n                    </div>\r\n                    {order.products?.map((prod) => (\r\n                      <div\r\n                        key={prod._id}\r\n                        className=\"row mb-2 flex-row p-2\"\r\n                        style={{\r\n                          border: \"2px solid skyblue\",\r\n                          borderRadius: \"15px\",\r\n                          background: \"#fffaf2\",\r\n                        }}\r\n                      >\r\n                        <div className=\"col-md-6 d-flex align-items-center\">\r\n                          {prod && (\r\n                            <img\r\n                              src={`/api/v1/product/product-photo/${prod._id}`}\r\n                              style={{\r\n                                height: \"190px\",\r\n                                width: \"230px\",\r\n                                border: \"2px solid red\",\r\n                                borderRadius: \"8px\",\r\n                              }}\r\n                              alt=\"product_image\"\r\n                            />\r\n                          )}\r\n                        </div>\r\n                        <div className=\"col-md-6 px-5\">\r\n                          <h6>{prod?.name}</h6>\r\n                          <p>{prod?.description.substring(0, 50)}...</p>\r\n                          <h6>Price :$ {prod?.price}</h6>\r\n                          <h6>Quantity : {prod?.cartQuantity}</h6>\r\n                          {prod?.category?._id === \"660c3a703b009992de3e49a4\" ||\r\n                          prod?.category?._id === \"660c3a813b009992de3e49a9\" ? (\r\n                            <>\r\n                              <h6>Color: {prod.color}</h6>\r\n                              <h6>Size: {prod.size}</h6>\r\n                            </>\r\n                          ) : (\r\n                            <></>\r\n                          )}\r\n                        </div>\r\n                      </div>\r\n                    ))}\r\n                    <div\r\n                      style={{ borderRadius: \"10px\" }}\r\n                      className=\"bg-danger-subtle order-user-detail p-3 mt-3 mb-3\"\r\n                    >\r\n                      <div className=\"d-flex justify-content-center\">\r\n                        <h2>Invoice File Upload</h2>\r\n                      </div>\r\n                      <form onSubmit={handleUpload}>\r\n                        <input\r\n                          type=\"text\"\r\n                          name=\"pdfName\"\r\n                          placeholder=\"invoice pdf name\"\r\n                          className=\"form-control\"\r\n                          required\r\n                          onChange={(e) => setPdfName(e.target.value)}\r\n                        />\r\n                        <br />\r\n                        <input\r\n                          type=\"file\"\r\n                          className=\"form-control\"\r\n                          accept=\"application/pdf\"\r\n                          name=\"file\"\r\n                          required\r\n                          onChange={(e) => setFile(e.target.files[0])}\r\n                        />\r\n                        <br />\r\n                        <button className=\"btn btn-primary\" type=\"submit\">\r\n                          Upload Pdf\r\n                        </button>\r\n                      </form>\r\n                      <br />\r\n                      <div className=\"bg-success-subtle\">\r\n                        {pdfData ? (\r\n                          <div className=\"d-flex p-2 flex-column justify-content-center\">\r\n                            <h3 className=\"text-center\">\r\n                              Invoice Name:{\" \"}\r\n                              <span className=\"text-danger\">\r\n                                {\" \"}\r\n                                {pdfData.pdfName}\r\n                              </span>\r\n                            </h3>\r\n                            <br />\r\n                            <button\r\n                              onClick={() => showPdf(pdfData.pdf)}\r\n                              className=\"btn btn-info\"\r\n                            >\r\n                              Show Pdf\r\n                            </button>\r\n                            <ViewPdf pdfFile={pdfFile} />\r\n                          </div>\r\n                        ) : null}\r\n                      </div>\r\n                    </div>\r\n                  </>\r\n                )}\r\n              </>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </Layout>\r\n  );\r\n}\r\n\r\nexport default AdminSingleOrder;\r\n"],"names":["_jsx","style","display","justifyContent","alignItems","children","DNA","visible","height","width","ariaLabel","wrapperStyle","wrapperClass","pdfjs","pdfjsWorker","ViewPdf","props","numPages","setNumPages","useState","pageNumber","setPageNumber","_jsxs","className","Document","file","pdfFile","onLoadSuccess","_ref","Array","apply","map","x","i","page","Page","renderTextLayer","renderAnnotationLayer","GlobalWorkerOptions","workerSrc","URL","toString","Option","Select","AdminSingleOrder","_order$products","oid","useParams","loading","setLoading","totalAmount","setTotalAmount","order","setOrder","orderId","setOrderId","setFile","setPdfFile","pdfName","setPdfName","pdfData","setPdfData","statusColor","setStatusColor","status","setStatus","async","getSingleOrder","data","axios","get","concat","_id","err","console","log","useEffect","success","toast","error","getPdf","cartTotalAmount","products","reduce","amount","item","price","cartQuantity","Layout","clName","title","Loader","_Fragment","borderRadius","buyer","name","address","phone","onChange","value","statusValue","put","message","handleChangeStatus","defaultValue","s","flexDirection","gap","whiteSpace","src","notProcessLogo","alt","processingLogo","shippedLogo","deliveredLogo","cancelLogo","prod","_prod$category","_prod$category2","border","background","description","substring","category","color","size","onSubmit","formData","FormData","append","res","post","headers","type","placeholder","required","e","target","accept","files","onClick","pdf"],"sourceRoot":""}